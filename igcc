#!/usr/bin/env bash
# igcc - Yet another interactive shell for C development
# Copyright (C) 2018 TANI Kojiro <kojiro0531@gmail.com>
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
 
readonly version="0.0.2"
readonly copy="(C) 2018 TANI Kojiro <kojiro0531@gmail.com>
(C) 2019 Zaoqi <zaomir@outlook.com>"

lines=()
count=0
libs=()
lang='c'
cmds=()
for cc in gcc clang; do
  type "$cc" >/dev/null 2>/dev/null && break
done
CC(){
  LANG= "$cc" "$@"
}
ccversion(){
  CC -v 2>&1 | grep version
}
headers=(stdio.h)
prog="$(basename "$0")"
not_interactive=""
pre_scripts=()
add-pre_scripts(){
  local t="$(mktemp)"
  echo "$*" > "$t"
  local line
  while read line; do
    pre_scripts+=("$line")
  done < "$t"
  rm "$t"
}

completion_candidates=(
  "auto" "break" "case" "char" "const"
  "continue" "default" "do" "double"
  "else" "enum" "extern" "float" "for"
  "goto" "if" "int" "long" "register"
  "return" "signed" "sizeof" "short"
  "static" "struct" "switch" "typedef"
  "union" "unsigned" "void" "volatile" "while"
  ":clear" ":edit" ":exit" ":help"
  ":include" ":lib" ":load" ":save" ":show" 
)

function possible-completions () {
  printf "%s%s\n" "$(prompt)" "$READLINE_LINE"
  local candidates=${@:-${completion_candidates[@]}}
  local longest=""
  local word
  
  for word in "${candidates[@]}"; do
    [ "${#word}" -gt "${#longest}" ] && longest="$word"
  done
  local n=$((${#longest} + 5))
  local cols="$(tput cols)"
  local fmt="$(printf "%%"$n"s%.0s" "$(seq $((cols / n)))")"
  printf ""$fmt"\n" "${candidates[@]}"
}

readonly comp_wordbreaks=("(" ")" ";" "{" "}")

function tab-complete () {
  local words=("$READLINE_LINE")
  if [ -n "$words" ]; then
    local slice=(${READLINE_LINE:0:$(($READLINE_POINT + 1))})
    local n=$((${#slice[@]} - 1))

    local break
    for break in "${comp_wordbreaks[@]}"; do
      if [[ "${words[$n]}" == "$break*" ]]; then
        words[$n]="$(echo "${words[$n]}" | cut -b 2-)"
        break
      fi
      break=
    done

    local comp_words=(\
      "$(compgen -W "$(echo ${completion_candidates[@]})" -- "${words[n]}")")
    if [ "${#comp_words[@]}" -eq 1 ]; then
      words[$n]=${comp_words[0]}
    elif [ "${#comp_words[@]}" -gt 1 ]; then
      local prefix="$(printf "%s\n" "${comp_words[@]}" |\
        sed -e '$!{N;s/^\(.*\).*\n\1.*$/\1\n\1/;D;}')"
      if [ "$prefix" = "${words[$n]}" ]; then
        possible-completions "${comp_words[@]}"
      else
        words[$n]="$prefix"
      fi
    fi
    words[$n]="$break${words[$n]}"
    READLINE_LINE="${words[*]}"
    slice="${words[@]:0:$(($n + 1))}"
    READLINE_POINT="${#slice}"
  else
    possible-completions
  fi
}

bind -x '"\t":"tab-complete"' >/dev/null 2>&1
bind -x '"\e?":"possible-completions"' >/dev/null 2>&1
bind -x '"\e=":"possible-completions"' >/dev/null 2>&1

if type indent >/dev/null 2>&1; then
  indent="indent -gnu -nut"
else
  indent=cat
fi

if type source-highlight >/dev/null 2>&1; then
  highlight="source-highlight -s c -f esc"
else
  highlight=cat
fi

readonly runtime="\
#define __fmt_string(v) _Generic((v),\\
  char*:\"\\e[34m\$%d\\e[0m = (string)\\\"%s\\\"\\n\",\\
  char:\"\\e[34m\$%d\\e[0m = (char)\\'%c\\'\\n\",\\
  int:\"\\e[34m\$%d\\e[0m = (int)%d\\n\",\\
  long:\"\\e[34m\$%d\\e[0m = (long)%ld\\n\",\\
  float:\"\\e[34m\$%d\\e[0m = (float)%f\\n\",\\
  double:\"\\e[34m\$%d\\e[0m = (double)%f\\n\",\\
  unsigned int:\"\\e[34m\$%d\\e[0m = (unsigned int)%u\\n\",\\
  unsigned long:\"\\e[34m\$%d\\e[0m = (unsigned long)%lu\\n\",\\
  void*:\"\\e[34m\$%d\\e[0m = (void*)%p\\n\",\\
  default:\"\\e[34m\$%d\\e[0m = (unknown type)%p\\n\")

#define __print(v) printf(__fmt_string(v), COUNT, v)
"

readonly template="\
#define __code %s
int main (void)
{
#ifdef PRINT
#ifndef SCRIPT
  __print(({__code}));
#endif
#else
  __code
#ifndef SCRIPT
  printf(\"\\e[34m\$%%d\\e[0m = (void)\\\\n\", COUNT);
#endif
#endif
  return 0;
}
"

function print-error() {
  printf "\e[31mError:$1\e[m\n"
  if [ -n "$not_interactive" ]; then
    exit 1
  fi
}

function print-success() {
  if [ -z "$not_interactive" ]; then
    printf "\e[34m$1\e[m\n"
  fi
}

function prompt() {
  printf "\e[35m$std\e[32m@\e[33m($prog)\e[32m> \e[m"
}

function add-semicolon-if-needed () {
  if [[ "${1: -1}" = ";" ]]; then
    echo "$1"
  else
    echo "$1;"
  fi
}

function create-source () {
  local i
  if [ -z "$not_interactive" ]; then
    local body="freopen(\"/dev/null\", \"w\", stdout);"
  else
    local body=""
  fi
  for ((i = 0; i < $count - 1; i++)); do
    body+="({$(add-semicolon-if-needed "${lines[i]}")"
  done
  if [ -z "$not_interactive" ]; then
    body+="({freopen(\"/dev/tty\", \"w\", stdout);"
  else
    body+="({;"
  fi
  body+="$(add-semicolon-if-needed "${lines[i]}")\
    $(printf "});%.0s" "${lines[@]}")"
  local include="$(printf "#include \"%s\"\n" "${headers[@]}")"
  printf "%s\n%s\n$template\n" "$include" "$runtime" "$body"
}

function compile-and-run () { 
  local bin="$(mktemp)"
  local src="$(create-source)"
  if [ -z "$not_interactive" ]; then
    local output="$(\
      echo "$src" | CC -x"$lang" -o "$bin" -DPRINT \
      -DCOUNT=$count "${cmds[@]}" - 2>&1 || \
      echo "$src" | CC -x"$lang" -o "$bin" \
      -DCOUNT=$count "${cmds[@]}" - 2>&1)"
  else
    local output="$(echo "$src" | CC -x"$lang" -o "$bin" -DSCRIPT "${cmds[@]}" - 2>&1)"
  fi
  if [ -x "$bin" ]; then
    if [ -z "$not_interactive" ]; then
      local result="$("$bin" 2>&1 || echo failed)"
      if [ -n "$result" ]; then
        let count--
        lines=("${lines[@]:0:$count}")
        print-error "Segmentation fault."
      fi
    else
      "$bin" || print-error "Segmentation fault"
    fi
  else
    let count--
    lines=("${lines[@]:0:$count}")
    print-success "$(echo "$output" | grep -E error: | sort -u)"
    print-error "Failed to compile."
  fi
  rm -f "$bin"
}

function command-help () {
  cat << EOS
    :clear              clear history and reset environment.
    :edit               invoke ${EDITOR:-vi}.
    :exit               exit $prog.
    :help               show this help.
    :include            show added header files.
    :include <header>   add header file.
    :lib                show added shared libraries.
    :lib <library>      add shared library to be linked.
    :load <file>        restore enviroment from <file>.
    :save <file>        save current environment into <file>.      
    :show               show history.
    ! <command>         excute shell command.
EOS
}

function command-clear () {
  count=0
  lines=()
  libs=()
  headers=(stdio.h)
}

function command-edit () {
  local file="$(mktemp)"
  local editor="${EDITOR:-vi}"
  
  if [ "${editor[0]}" = "vi" ] ||\
     [ "${editor[0]}" = "vim" ]; then
    printf "\n// vi:filetype=c" > $file
  elif [ "${editor[0]}" = "emacs" ]; then
    echo "// -*- mode:c -*-" > $file
  fi
  
  "$editor" "$file"
  
  local content="$(sed "/^\/\/.*$/d" "$file")"
  rm -f "$file"
  if [ -z "$content" ]; then
    print-error "Nothing to compile."
  else
    lines+=("$(echo $content)")
    let count++
    IFS= compile-and-run
  fi
}

function command-include () {
  local header="$2"
  if [ -z "$header" ]; then
    print-success "(${headers[*]})"
  else
    if [ -z "$(echo "${headers[*]}" | grep -o "$header")" ]; then
      if [ -n "$(echo \#include \""$header"\" |\
              CC -x"$lang" "${cmds[@]}" - 2>&1 | grep -o main)" ]; then
        headers+=("$header")
        print-success "(${headers[*]})"
      else
        print-error "Could not find \`$header\`."
      fi
    else
      print-error "Already included."
    fi
  fi
}

function command-lib () {
  local lib="$2"
  if [ -z "$lib" ]; then
    print-success "(${libs[*]})"
  else
    if [ -z "$(echo "${libs[@]}" | grep -o "$lib")" ]; then
      if [ -z "$(CC -x"$lang" "${cmds[@]}" "-l$2" 2>&1 | grep -o main)" ]; then
        print-error "Could not find \`lib$lib.so\`."
      else
        libs+=("-l$lib")
        cmds+=("-l$lib")
        print-success "(${libs[*]})"
      fi
    else
      print-error "Already linked."
    fi
  fi
}

function command-load () {
  local file="$2"
  if [ -z "$file" ]; then
    print-error "Missing filename."
  else
    if source "$(realpath "$file")" >/dev/null 2>&1; then
      print-success "Loaded.:\`$file\`"
    else
      print-error "Failed to load from \`$file\`."
    fi
  fi
}

function command-save () {
  local file="$2"
  if [ -z "$file" ]; then
    print-error "Missing filename."
  else
    cat << EOS > "$file"
$(if [ "${#libs[@]}" != 0 ]; then
  echo "libs=($(printf "\"%q\" " "${libs[@]}"))"
else
  echo 'libs=()'
fi)
headers=($(printf "%q " "${headers[@]}"))
std=$(printf "%q" "$std")
lines=($(printf "%q " "${lines[@]}"))
count=$(printf "%q" "$count")
EOS
   print-success "Wrote into \`$file\`."
  fi
}

function command-show () {
  local i
  for ((i=0; i < ${#headers[@]}; i++)); do
    if [ "$i" -eq 0 ]; then
      printf "\e[34minclude\e[m: "
    else
      printf "       : "
    fi
    printf "#include \"%s\"\n" "${headers[i]}" |\
      eval "$indent" | eval "$highlight"
  done

  local line
  local flag=true
  local _IFS="$IFS"
  for ((i=0; i < $count; i++)); do
    IFS=$'\n'
    flag=true
    for line in $(echo "${lines[i]}" | eval "$indent" | eval "$highlight"); do
      if "$flag"; then
        printf "\e[34m%7s\e[m: " "\$$(($i + 1))"
        flag=false
      else
        printf "        : "
      fi
      printf "%s\n" "$line"
    done
    IFS="$_IFS"
  done
}

function validate-line () {
  local line="$(add-semicolon-if-needed "$*")"
  echo "void main() { "$line" }" |\
    CC -x"$lang" -w -fsyntax-only - 2>&1 |\
    grep -E "error: expected declaration or statement at end of input" >/dev/null
  echo "$?" 
}

function read-multiline () {
  local buf=("$1")
  local line
  local prompt="$(prompt |\
    sed -e "s/[[:cntrl:]]\[[0-9]*m//g" -e "s/././g" | cut -b 2-) "
  
  while [ "$(validate-line "${buf[@]}")" -ne 1 ]; do
    if [ -z "$not_interactive" ]; then
      read -erp "$prompt" line
    else
      read -erp "$prompt" -t 20 line
    fi
    history -s "$line"
    if [ "$line" = "." ]; then
      echo ""
      return
    fi
    buf+=("$line")
  done
  echo "$(IFS=; echo "${buf[*]}")"
}

function main-loop () {
  local line
  local is_eof
  while true; do
    if [ "${#pre_scripts[@]}" != 0 ]; then
      line="${pre_scripts[0]}"
      pre_scripts=("${pre_scripts[@]:1}")
    else
      read -er -p "$(prompt)" line || is_eof=t
    fi
    history -s "$line"
    if [ -n "$is_eof" ]; then
      [ -z "$not_interactive" ] && exit 0
      IFS= compile-and-run
      break
    elif [ "$line" = ":clear" ]; then
      command-clear
    elif [ "$line" = ":edit" ]; then
      command-edit
    elif [ "$line" = ":exit" ]; then
      exit 0
    elif [ "$line" = ":help" ]; then
      command-help
    elif [ "$line" = ":include" ]; then
      command-include
    elif [[ $line = :include\ * ]]; then
      command-include $line
    elif [ "$line" = ":lib" ]; then
      command-lib
    elif [[ $line = :lib\ * ]]; then
      command-lib $line
    elif [[ $line = :load\ * ]]; then
      command-load $line
    elif [[ $line = :save\ * ]]; then
      command-save $line
    elif [ "$line" = ":show" ]; then
      command-show
    elif [[ $line = :* ]]; then
      print-error "Invalid command or missing arguments. try \`:help\`."
    elif [[ $line = \#* ]]; then
      print-error "CPP directive is not allowed. \`try :help\`."
    elif [[ $line = \!* ]]; then
      eval "$(echo "$line" | sed -e 's/^.//g')"
    else
      line="$(read-multiline "$line")"
      if [ "$line" ]; then 
        local _IFS="$IFS"
        IFS= lines+=("$line")
        let count++
        [ -z "$not_interactive" ] && compile-and-run
        IFS="$_IFS"
      fi
    fi
    [ -z "$not_interactive" ] && echo
  done
}

function show-help-and-exit () {
  cat << EOS
Usage: $prog [options]
Options:
  -h, --help                   show this help and exit.
  -v, --version                show version info and exit.
  -std <standard>              specify c dialect.
  -i, --interactive <boolean>  interactive or not. default: true
  -r, --require <file>         interpret file.
  -e, --eval <...>             evaluate script.
  -Pc <option>                 pass <option> to the c compiler.
  -cc <compiler>               specify c compiler.
  -x <language>                specify the language. permissible languages include: c. default: c
EOS
  exit 1
}

function show-version-and-exit () {
  echo "$prog" "$version"
  exit 1
}

function set-std () {
  if [[ -z "$1" ]]; then
    print-error "Missing argument."
    exit 1
  fi
  if echo | CC -x"$lang" -std="$1" -fsyntax-only - >/dev/null 2>&1; then
    cmds+=("-std=$1")
  else
    print-error "Unrecognized option: $1"
    exit 1
  fi
}

function main () {
  local opt
  local scripts=()
  local std
  for opt in "$@"; do
    case "$opt" in
      '-v' | '--version')
        show-version-and-exit
        ;;
      '-h' | '--help')
        show-help-and-exit
        ;;
      '-std')
        std="$2"
        shift 2
        ;;
      '-i' | '--interactive')
        case "$2" in
	  'true' | 't' | '1')
	    not_interactive=""
	    ;;
	  'false' | 'f' | '0')
	    not_interactive="t"
	    ;;
	  *)
	    show-help-and-exit
	    ;;
	esac
        shift 2
        ;;
      '-r' | '--require')
        add-pre_scripts "$(cat "$2" | sed -e '/^#!/d')"
        shift 2
        ;;
      '-e' | '--eval')
        add-pre_scripts "$(echo "$2" | sed -e '/^#!/d')"
        shift 2
        ;;
      '-Pc')
	cmds+=("$2")
	shift 2
	;;
      '-cc')
	cc="$2"
	shift 2
	;;
      '-x')
	lang="$2"
	shift 2
	;;
    esac
  done

  [ -n "$*" ] && show-help-and-exit

  [ -n "$std" ] && set-std "$std"

  [ -z "$not_interactive" ] &&
cat << EOS
$prog $version with $(ccversion)
$copy
try \`:help\` to get help. Ctrl-D to exit.

EOS
  main-loop
}

main "$@"
