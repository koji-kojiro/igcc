#!/usr/bin/env bash
# igcc - Yet another interactive shell for C development
# Copyright (C) 2018 TANI Kojiro <kojiro0531@gmail.com>
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
 
readonly version="0.0.1"
readonly copy="(C) 2018 TANI Kojiro <kojiro0531@gmail.com>"

lines=()
count=0
libs=()
std=gnu11
if type clang >/dev/null 2>/dev/null; then
  cc=clang
  ccversion=$(clang --version | grep ^clang)
else
  cc=gcc
  ccversion=$(gcc --version | grep ^gcc)
fi
headers=(stdio.h)
prog=$(basename $0)
script=""
pre_scripts=()

completion_candidates=(
  "auto" "break" "case" "char" "const"
  "continue" "default" "do" "double"
  "else" "enum" "extern" "float" "for"
  "goto" "if" "int" "long" "register"
  "return" "signed" "sizeof" "short"
  "static" "struct" "switch" "typedef"
  "union" "unsigned" "void" "volatile" "while"
  ":clear" ":edit" ":exit" ":help"
  ":include" ":lib" ":load" ":save" ":show" 
)

function possible-completions () {
  printf "%s%s\n" "$(prompt)" "$READLINE_LINE"
  local candidates=${@:-${completion_candidates[@]}}
  local longest=""
  local word
  
  for word in ${candidates[@]}; do
    if [ ${#word} -gt ${#longest} ]; then
      longest=$word
    fi
  done
  local n=$((${#longest} + 5))
  local cols=$(tput cols)
  local fmt=$(printf "%%"$n"s%.0s" $(seq $((cols / n))))
  printf ""$fmt"\n" ${candidates[@]}
}

readonly comp_wordbreaks=("(" ")" ";" "{" "}")

function tab-complete () {
  local words=($READLINE_LINE)
  if [ $words ]; then
    local slice=(${READLINE_LINE:0:$(($READLINE_POINT + 1))})
    local n=$((${#slice[@]} - 1))

    local break
    for break in ${comp_wordbreaks[@]}; do
      if [[ ${words[$n]} == $break* ]]; then
        words[$n]="$(echo ${words[$n]} | cut -b 2-)"
        break
      fi
      break=
    done

    local comp_words=(\
      $(compgen -W "$(echo ${completion_candidates[@]})" -- ${words[n]}))
    if [ ${#comp_words[@]} -eq 1 ]; then
      words[$n]=${comp_words[0]}
    elif [ ${#comp_words[@]} -gt 1 ]; then
      local prefix=$(printf "%s\n" "${comp_words[@]}" |\
        sed -e '$!{N;s/^\(.*\).*\n\1.*$/\1\n\1/;D;}')
      if [ $prefix = ${words[$n]} ]; then
        possible-completions "${comp_words[@]}"
      else
        words[$n]=$prefix
      fi
    fi
    words[$n]="$break${words[$n]}"
    READLINE_LINE=${words[@]}
    slice="${words[@]:0:$(($n + 1))}"
    READLINE_POINT=${#slice}
  else
    possible-completions
  fi
}

bind -x '"\t":"tab-complete"' >/dev/null 2>&1
bind -x '"\e?":"possible-completions"' >/dev/null 2>&1
bind -x '"\e=":"possible-completions"' >/dev/null 2>&1

if type indent >/dev/null 2>&1; then
  indent="indent -gnu -nut"
else
  indent=cat
fi

if type source-highlight >/dev/null 2>&1; then
  highlight="source-highlight -s c -f esc"
else
  highlight=cat
fi

readonly runtime="\
#define __fmt_string(v) _Generic((v),\\
  char*:\"\\e[34m\$%d\\e[0m = (string)\\\"%s\\\"\\n\",\\
  char:\"\\e[34m\$%d\\e[0m = (char)\\'%c\\'\\n\",\\
  int:\"\\e[34m\$%d\\e[0m = (int)%d\\n\",\\
  long:\"\\e[34m\$%d\\e[0m = (long)%ld\\n\",\\
  float:\"\\e[34m\$%d\\e[0m = (float)%f\\n\",\\
  double:\"\\e[34m\$%d\\e[0m = (double)%f\\n\",\\
  unsigned int:\"\\e[34m\$%d\\e[0m = (unsigned int)%u\\n\",\\
  unsigned long:\"\\e[34m\$%d\\e[0m = (unsigned long)%lu\\n\",\\
  void*:\"\\e[34m\$%d\\e[0m = (void*)%p\\n\",\\
  default:\"\\e[34m\$%d\\e[0m = (unknown type)%p\\n\")

#define __print(v) printf(__fmt_string(v), COUNT, v)
"

readonly template="\
#define __code %s
int main (void)
{
#ifdef PRINT
#ifndef SCRIPT
  __print(({__code}));
#endif
#else
  __code
#ifndef SCRIPT
  printf(\"\\e[34m\$%%d\\e[0m = (void)\\\\n\", COUNT);
#endif
#endif
  return 0;
}
"

function print-error() {
  printf "\e[31mError:$1\e[m\n"
  if [ ! -z "$script" ]; then 
    exit 1
  fi
}

function print-success() {
  if [ -z "$script" ]; then
    printf "\e[34m$1\e[m\n"
  fi
}

function prompt() {
  printf "\e[35m$std\e[32m@\e[33m($prog)\e[32m> \e[m"
}

function exit-with-prompt () {
  local response
  echo
  read -r -p "Do you really want to exit ([y]/n)? " response
  if [ "$response" = "y" -o -z "$response" ]; then
    exit 0
  fi
}

function add-semicolon-if-needed () {
  if [[ "${1: -1}" = ";" ]]; then
    echo "$1"
  else
    echo "$1;"
  fi
}

function create-source () {
  local i
  if [ -z "$script" ]; then
    local body="freopen(\"/dev/null\", \"w\", stdout);"
  else
    local body=""
  fi
  for ((i = 0; i < $count - 1; i++)); do
    body+="({$(add-semicolon-if-needed ${lines[i]})"
  done
  if [ -z "$script" ]; then
    body+="({freopen(\"/dev/tty\", \"w\", stdout);"
  else
    body+="({;"
  fi
  body+="$(add-semicolon-if-needed ${lines[i]})\
    $(printf "});%.0s" ${lines[@]})"
  local include="$(printf "#include \"%s\"\n" "${headers[@]}")"
  printf "%s\n%s\n$template\n" "$include" "$runtime" "$body"
}

function compile-and-run () { 
  local bin=$(mktemp)
  local src="$(create-source)"
  if [ -z "$script" ]; then
    local output="$(\
      echo "$src" | "$cc" -xc -std=$std -o $bin -DPRINT \
      -DCOUNT=$count ${libs[@]} - 2>&1 || \
      echo "$src" | "$cc" -xc -std=$std -o $bin \
      -DCOUNT=$count ${libs[@]} - 2>&1)"
  else
    local output="$(echo $src | "$cc" -xc -std=$std -o $bin -DSCRIPT - 2>&1)"
  fi
  if [ -x $bin ]; then
    if [ -z "$script" ]; then
      local result="$($bin 2>&1 || echo failed)"
      if [ ! -z "$result" ]; then
        let count--
        lines=(${lines[@]:0:$count})
        print-error "Segmentation fault."
      fi
    else
      $bin || print-error "Segmentation fault"
    fi
  else
    let count--
    lines=(${lines[@]:0:$count})
    print-success "$(echo $output | grep -E error: | sort -u)"
    print-error "Failed to compile."
  fi
  rm -f $bin
}

function command-help () {
  cat << EOS
    :clear              clear history and reset environment.
    :edit               invoke ${EDITOR:-vi}.
    :exit               exit $prog.
    :help               show this help.
    :include <header>   add header file.
    :lib <library>      add shared library to be linked.
    :load <file>        restore enviroment from <file>.
    :save <file>        save current environment into <file>.      
    :show               show history.
    ! <command>         excute shell command.
EOS
}

function command-clear () {
  count=0
  lines=()
  libs=()
  headers=(stdio.h)
}

function command-edit () {
  local file=$(mktemp)
  local editor=${EDITOR:-vi}
  
  if [ "${editor[0]}" = "vi" ] ||\
     [ "${editor[0]}" = "vim" ]; then
    printf "\n// vi:filetype=c" > $file
  elif [ "${editor[0]}" = "emacs" ]; then
    echo "// -*- mode:c -*-" > $file
  fi
  
  $editor $file
  
  local content="$(sed "/^\/\/.*$/d" $file)"
  rm -f $file
  if [ -z "$content" ]; then
    print-error "Nothing to compile."
  else
    lines+=("$(echo $content)")
    let count++
    IFS= compile-and-run
  fi
}

function command-include () {
  local header=$2
  if [ -z $header ]; then
    print-success "(${headers[*]})"
  else
    if [ -z $(echo "${headers[@]}" | grep -o $header) ]; then
      if [ -z $(echo \#include \"$header\" |\
              "$cc" -xc - 2>&1 | grep -o $header) ]; then
        headers+=("$header")
        print-success "(${headers[*]})"
      else
        print-error "Could not find \`$header\`."
      fi
    else
      print-error "Already included."
    fi
  fi
}

function command-lib () {
  local lib=$2
  if [ -z $lib ]; then
    print-success "(${libs[*]})"
  else
    if [ -z $(echo "${libs[@]}" | grep -o $lib) ]; then
      if [ -z "$("$cc" -l$2 2>&1 | grep -o main)" ]; then
        print-error "Could not find \`lib$lib.so\`."
      else
        libs+=("-l$lib")
        print-success "(${libs[*]})"
      fi
    else
      print-error "Already linked."
    fi
  fi
}

function command-load () {
  local file=$2
  if [ -z $file ]; then
    print-error "Missing filename."
  else
    if source $(realpath $file) >/dev/null 2>&1; then
      print-success "Loaded.:\`$file\`"
    else
      print-error "Failed to load from \`$file\`."
    fi
  fi
}

function command-save () {
  local file=$2
  if [ -z $file ]; then
    print-error "Missing filename."
  else
    cat << EOS > $file
lib=(${libs[@]})
headers=(${headers[@]})
std=$std
lines=($(printf "%q " "${lines[@]}"))
count=$count
EOS
   print-success "Wrote into \`$file\`."
  fi
}

function command-show () {
  echo "$(
  local i
  for ((i=0; i < ${#headers[@]}; i++)); do
    if [ $i -eq 0 ]; then
      printf "\e[34minclude\e[m: "
    else
      printf "       : "
    fi
    printf "#include \"%s\"\n" ${headers[i]} |\
      eval $indent | eval $highlight
  done

  local line
  local flag=true
  local _IFS=$IFS
  for ((i=0; i < $count; i++)); do
    IFS=$'\n'
    flag=true
    for line in $(echo "${lines[i]}" | eval $indent | eval $highlight); do
      if $flag; then
        printf "\e[34m%7s\e[m: " "\$$(($i + 1))"
        flag=false
      else
        printf "        : "
      fi
      printf "%s\n" "$line"
    done
    IFS=$_IFS
  done)"
}

function validate-line () {
  local line="$(add-semicolon-if-needed "$*")"
  echo "void main() { "$line" }" |\
    "$cc" -xc -w -fsyntax-only - 2>&1 |\
    grep -E "error: expected declaration or statement at end of input" >/dev/null
  echo "$?" 
}

function read-multiline () {
  local buf=("$1")
  local line
  local prompt="$(prompt |\
    sed -e "s/[[:cntrl:]]\[[0-9]*m//g" -e "s/././g" | cut -b 2-) "
  
  while true; do
   if [ $(validate-line "${buf[@]}") -eq 1 ]; then
      break
    fi
    if [ -z "$script" ]; then
      read -erp "$prompt" line
    else
      read -erp "$prompt" -t 20 line
    fi
    history -s "$line"
    if [ "$line" = "." ]; then
      echo ""
      return
    fi
    buf+=("$line")
  done
  echo "$(IFS=; echo "${buf[*]}")"
}

function main-loop () {
  local line
  while true; do
    if [ "${#pre_scripts[@]}" != 0 ]; then
      line="${pre_scripts[*]}"
      pre_scripts=()
    else
      read -er -p "$(prompt)" line
    fi
    history -s "$line"
    if [ -z "$line" ]; then
      if [ -z "$script" ]; then
          exit-with-prompt
      else
        IFS= compile-and-run
        break
      fi
    elif [ "$line" = ":clear" ]; then
      command-clear
    elif [ "$line" = ":edit" ]; then
      command-edit
    elif [ "$line" = ":exit" ]; then
      exit 0
    elif [ "$line" = ":help" ]; then
      command-help
    elif [[ $line = :include\ * ]]; then
      command-include $line
    elif [[ $line = :lib\ * ]]; then
      command-lib $line
    elif [[ $line = :load\ * ]]; then
      command-load $line
    elif [[ $line = :save\ * ]]; then
      command-save $line
    elif [ "$line" = ":show" ]; then
      command-show
    elif [[ $line = :* ]]; then
      print-error "Invalid command or missing arguments. try \`:help\`."
    elif [[ $line = \#* ]]; then
      print-error "CPP directive is not allowed. \`try :help\`."
    elif [[ $line = \!* ]]; then
      eval "$(echo "$line" | sed -e 's/^.//g')"
    else
      line="$(read-multiline "$line")"
      if [ "$line" ]; then 
        local _IFS="$IFS"
        IFS= lines+=("$line")
        let count++
        if [ -z "$script" ]; then
          compile-and-run
        fi
        IFS="$_IFS"
      fi
    fi
    if [ -z "$script" ];then
      echo
    fi
  done
}

function show-help-and-exit () {
  cat << EOS
Usage: $prog [options]
Options:
  -h, --help           show this help and exit.
  -v, --version        show version info and exit.
  -std <standard>      specify c dialect.
  -S, --script <file>  interpret file and exit.
  -l, --load <file>    interpret file.
EOS
  exit 1
}

function show-version-and-exit () {
  echo "$prog" "$version"
  exit 1
}

function set-std () {
  if [[ -z "$1" ]]; then
    print-error "Missing argument."
    exit 1
  fi
  if echo | "$cc" -std="$1" -fsyntax-only -xc - >/dev/null 2>&1; then
    std=$1
  else
    print-error "Unrecognized option: $1"
    exit 1
  fi
}

function main () {
  local opt
  local scripts=()
  for opt in "$@"; do
    case $opt in
      '-v' | '--version')
        show-version-and-exit
        ;;
      '-h' | '--help')
        show-help-and-exit
        ;;
      '-std')
        set-std "$2"
        shift 2
        ;;
      '-S' | '--script')
        script="true"
        scripts+=("$(cat "$2" | sed -e '/^$/d')")
        shift 2
        ;;
      '-l' | '--load')
        pre_scripts+=("$(cat "$2" | sed -e '/^$/d')")
        shift 2
        ;;
    esac
  done

  if [ ! -z "$*" ]; then
    show-help-and-exit
  fi

  if [ ! -z "$script" ]; then
    echo "${scripts[*]}" | main-loop
  else
cat << EOS
$prog $version with $ccversion
$copy
try \`:help\` to get help. Ctrl-D to exit.

EOS
    main-loop
  fi
}

main "$@"
